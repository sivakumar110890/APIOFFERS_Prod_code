package com.comviva.api.j4u.utils;

import com.comviva.api.exception.ConfigException;
import com.comviva.api.j4u.config.PropertiesLoader;
import com.comviva.api.j4u.model.HTTPResponse;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.log4j.Logger;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSession;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.Date;

public class HTTPSclient {
    private static final Logger LOGGER = Logger.getLogger(HTTPSclient.class);
    private static HTTPSclient httpClient = null;

    private HTTPSclient() {
    }

    public static HTTPSclient getInstance() {
        httpClient = new HTTPSclient();
        return httpClient;
    }

    private static void trustAllHttpsCertificates() throws ConfigException {

        // Create a trust manager that does not validate certificate chains:

        try {
            javax.net.ssl.TrustManager[] trustAllCerts =

                            new javax.net.ssl.TrustManager[1];

            javax.net.ssl.TrustManager tm = new CustomTM();

            trustAllCerts[0] = tm;

            javax.net.ssl.SSLContext sc =

                            javax.net.ssl.SSLContext.getInstance("TLSv1.2");

            sc.init(null, trustAllCerts, null);

            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(

                            sc.getSocketFactory());
        } catch (KeyManagementException e) {
            LOGGER.error("KeyManagementException:: ", e);
            throw new ConfigException(e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            LOGGER.error("NoSuchAlgorithmException:: ", e);
            throw new ConfigException(e.getMessage());
        }

    }

    public HTTPResponse sendRequest(String body, String url, String method) {
        LOGGER.debug("Inside sendRequest::" + url);
        HTTPResponse httpResponse = new HTTPResponse(-1, J4UOfferConstants.STATUS_FAILURE);
        HttpURLConnection conn = null;
        long startTime = System.currentTimeMillis();
        String sentTime = Utils.getDateAsString(new Date(), J4UOfferConstants.DATE_FORMAT);
        try {
            HostnameVerifier hv = (String urlHostName, SSLSession session) -> urlHostName.equalsIgnoreCase(session.getPeerHost());
            trustAllHttpsCertificates();
            LOGGER.debug("Trusted the certificate");

            URL postURL = new URL(url);
            conn = (HttpURLConnection) postURL.openConnection();
            conn.setRequestMethod(method);

            LOGGER.debug("Authentication is disabled");
            conn.setReadTimeout(PropertiesLoader.getIntValue(J4UOfferConstants.READTIMEOUT));
            conn.setConnectTimeout(PropertiesLoader.getIntValue(J4UOfferConstants.CONNECTIONTIMEOUT));
            conn.setUseCaches(false);
            LOGGER.fatal("Before getting response time::" + sentTime);
            if (!"GET".equals(method)) {
                LOGGER.debug("RequestMethod is other than GET");
                conn.setDoOutput(true);
                DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
                if (body != null) {
                    wr.writeBytes(body);
                } else {
                    wr.writeBytes("");
                }
                wr.flush();
                wr.close();
            }
            httpResponse.setStatus(conn.getResponseCode());
            LOGGER.debug("After getting response code::" + httpResponse.getStatus());

            httpResponse.setResponse(HttpStatus.getStatusText(httpResponse.getStatus()));
            LOGGER.debug("Response::" + httpResponse.getResponse());
            if (httpResponse.getStatus() == J4UOfferConstants.HTTP_SUCCESS && conn.getInputStream() != null) {
                LOGGER.debug("Inside get stream ");
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder builder = new StringBuilder();
                String output;
                while ((output = br.readLine()) != null) {
                    builder.append(output);
                }
                httpResponse.setOutput(builder.toString());
                LOGGER.debug("Output" + httpResponse.getOutput());
            }
            long totalTime = System.currentTimeMillis() - startTime;
            String recvTime = Utils.getDateAsString(new Date(), J4UOfferConstants.DATE_FORMAT);
            LOGGER.fatal("Time taken to send request in millis::" + totalTime);
            httpResponse.setResponseTime(totalTime);
            httpResponse.setRecvTime(recvTime);
            httpResponse.setSentTime(sentTime);
        } catch (Exception e) {
            LOGGER.error("Exception", e);
        }
        LOGGER.debug(httpResponse);
        return httpResponse;
    }

    public static class CustomTM implements javax.net.ssl.TrustManager, javax.net.ssl.X509TrustManager {
        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return new java.security.cert.X509Certificate[0];
        }

        public boolean isServerTrusted(java.security.cert.X509Certificate[] certs) {
            LOGGER.trace("certs" + certs);
            return true;
        }

        public boolean isClientTrusted(java.security.cert.X509Certificate[] certs) {
            LOGGER.trace("certs" + certs);
            return true;
        }

        @Override
        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) throws java.security.cert.CertificateException {
            try {
                if (PropertiesLoader.getBooleanValue(J4UOfferConstants.SSL_CERTIFICATE_CHECK_ENABLED)) {
                    certs[0].checkValidity();
                }
            } catch (Exception e) {
                LOGGER.error("Exception in Checking Certificate Validity");
                throw new CertificateException("Certificate not valid or trusted.", e);
            }
            return;
        }

        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) throws CertificateException {
            try {
                if (PropertiesLoader.getBooleanValue(J4UOfferConstants.SSL_CERTIFICATE_CHECK_ENABLED)) {
                    certs[0].checkValidity();
                }
            } catch (Exception e) {
                LOGGER.error("Exception in Checking Certificate Validity");
                throw new CertificateException("Certificate not valid or trusted.", e);
            }
            return;
        }
    }
}
